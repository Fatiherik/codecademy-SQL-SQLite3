—  SELECT *
 FROM survey_responses
 LIMIT 10;

—SELECT question_text,
   COUNT(DISTINCT user_id)
FROM survey_responses
GROUP BY 1;

— SELECT *
 FROM onboarding_modals
 LIMIT 10;

—SELECT modal_text,
  COUNT(DISTINCT user_id)
FROM onboarding_modals
GROUP BY 1
ORDER BY 1;

—SELECT modal_text,
  COUNT(DISTINCT CASE
    WHEN ab_group = 'control' THEN user_id
    END) AS 'control_clicks',
  COUNT(DISTINCT CASE
    WHEN ab_group = 'variant' THEN user_id
    END) AS 'variant_clicks'
FROM onboarding_modals
GROUP BY 1
ORDER BY 1;

— SELECT *
FROM browse
LIMIT 5;

SELECT *
FROM checkout
LIMIT 5;

SELECT *
FROM purchase
LIMIT 5;


—  SELECT *
 FROM browse AS 'b'
 LEFT JOIN checkout AS 'c'
  ON b.user_id=c.user_id
 LEFT JOIN purchase AS 'd'
  ON c.user_id=d.user_id
 LIMIT 50;

SELECT DISTINCT b.browse_date,
   b.user_id,
   c.user_id IS NOT NULL AS 'is_checkout',							For review, IS NOT NULL will return:
   p.user_id IS NOT NULL AS 'is_purchase'								1 (True) if a non-empty value is found
FROM browse AS 'b'											0 (False) if a NULL value is found
LEFT JOIN checkout 'c'
  ON c.user_id = b.user_id
LEFT JOIN purchase 'p'
  ON p.user_id = c.user_id
LIMIT 50;


— WITH funnels AS (
  SELECT DISTINCT b.browse_date,             							once yeni bir tablo oluşturduk sonra  o tabloda sorgu yaptık
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT COUNT(*) AS 'num_browse'
FROM funnels;


— WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT COUNT(*) AS 'num_browse', 
  SUM(is_checkout) AS ‘num_checkout’
FROM funnels;

—WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT COUNT(*) AS 'num_browse', 
  SUM(is_checkout) AS ‘num_checkout’,
  SUM(is_purchase) AS ‘num_purchase’,
  1.0 * SUM(is_checkout) / COUNT(user_id) AS '% browse-checkout',
  1.0 * SUM(is_purchase) / SUM(is_checkout) AS '% checkout purchase'							1 ile carpmazsak 0 gösteriyor çarparsak 0,23 gösteriyor
FROM funnels;

—What does multiplying by 1.0 do to a number?
By default, mathematical operations between integers will round down to the closest integer. In order to avoid a rounded result, it’s a common practice to multiply the result by 1.0. Doing this will result in a decimal number rather than an integer.
— WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT browse_date,
   COUNT(*) AS 'num_browse',
   SUM(is_checkout) AS 'num_checkout',
   SUM(is_purchase) AS 'num_purchase',
   1.0 * SUM(is_checkout) / COUNT(user_id) AS 'browse_to_checkout',
   1.0 * SUM(is_purchase) / SUM(is_checkout) AS 'checkout_to_purchase'
FROM funnels
GROUP BY browse_date
ORDER BY browse_date;


